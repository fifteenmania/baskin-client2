{"version":3,"file":"static/js/900.7626284f.chunk.js","mappings":"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","sources":["component/Description.tsx","component/Header.tsx","component/InputPanel.tsx","lib/linarg.ts","lib/strategy.ts","feature/calculator/StartingIndicator.tsx","feature/calculator/NumberIndicator.tsx","feature/calculator/ChartsContainer.tsx","feature/calculator/CalculatorMain.tsx","hooks/useGameSetting.ts"],"sourcesContent":["export default function Description({children} : {children: React.ReactNode}) {\r\n  return <div className=\"\">\r\n    {children}\r\n  </div>\r\n}","import React, { ReactNode } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport function TitleText({children} : {children: React.ReactNode}) {\r\n  return <span>\r\n    {children}\r\n  </span>\r\n}\r\n\r\nexport default function Header({svg, text, to} : {svg: ReactNode, text: string, to: string}) {\r\n  return <header className=\"my-6\">\r\n    <Link to={to} className=\"flex align-baseline w-fit\">\r\n      <svg className=\"w-9 h-9 mr-5 drop-shadow-xl dark:fill-white\">\r\n        {svg}\r\n      </svg>\r\n      <h2 className='font-bold text-2xl'>{text}</h2>\r\n    </Link>\r\n  </header>\r\n}","import React from \"react\"\r\nimport { GameSettingActionsKind, GameSettingDispatch } from \"../hooks/useGameSetting\";\r\nimport { GameSettingInput } from \"../typedef/GameSetting\";\r\n\r\nfunction InputFieldNumber({onChange, name, value, ...props}: {onChange: React.ChangeEventHandler<HTMLInputElement>, name: string, value: string}) {\r\n  return <input className=\"border \r\n    dark:bg-gray-800\r\n    border-gray-300 \r\n    dark:border-gray-600\r\n    text-base \r\n    rounded-lg \r\n    outline-1\r\n    focus:outline-blue-600\r\n    dark:focus:outline-blue-200\r\n    block \r\n    w-full \r\n    p-2\" type=\"number\" onChange={onChange} value={value} name={name} {...props} />\r\n}\r\n\r\nfunction InputFieldLabel({htmlFor, children}: {htmlFor: string, children?: React.ReactNode}) {\r\n  return <label htmlFor={htmlFor} className=\" text-base font-medium block text-gray-800 dark:text-gray-100\">\r\n    {children}\r\n  </label>\r\n}\r\n\r\nfunction InputFieldContainer({children}: {children?: React.ReactNode}) {\r\n  return <div className=\"mb-4 max-w-sm\">\r\n    {children}\r\n  </div>\r\n}\r\n\r\nfunction InputBasicFields({gameSetting, dispatch} : {gameSetting: GameSettingInput, dispatch: GameSettingDispatch}) {\r\n  return <>\r\n  <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"num-player\">플레이어 수</InputFieldLabel>\r\n      <InputFieldNumber name=\"num-player\" value={gameSetting.numPlayer} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_NUM_PLAYER, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n    <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"max-call\">한 번에 부르는 최대 수</InputFieldLabel>\r\n      <InputFieldNumber name=\"max-call\" value={gameSetting.maxCall} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_MAX_CALL, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n    <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"num-end\">마지막 숫자</InputFieldLabel>\r\n      <InputFieldNumber name=\"num-end\" value={gameSetting.numEnd} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_NUM_END, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n  </>\r\n}\r\n\r\nexport default function InputPanel({gameSetting, dispatch} : {gameSetting: GameSettingInput, dispatch: GameSettingDispatch}) {\r\n  return <div className=\"flex flex-col mt-4 mb-4\">\r\n    <InputBasicFields gameSetting={gameSetting} dispatch={dispatch}/>\r\n  </div>\r\n}\r\n\r\nexport function InputPanelWithPlayer({gameSetting, dispatch} : {gameSetting: GameSettingInput, dispatch: GameSettingDispatch}) {\r\n  return <div className=\"flex flex-col mt-4 mb-4\">\r\n    <InputBasicFields gameSetting={gameSetting} dispatch={dispatch}/>\r\n    <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"my-turn\">나의 순서</InputFieldLabel>\r\n      <InputFieldNumber name=\"my-turn\" value={gameSetting.myOrder} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_MY_ORDER, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n  </div>\r\n}","/**\r\n * \r\n * @param vec 입력 벡터입니다.\r\n * @returns `vec` 내부 값 중 최솟값입니다.\r\n */\r\n export function vecFindMin(vec: number[]): number {\r\n  return vec.reduce((lowest, current) => lowest > current ? current : lowest, Infinity);\r\n}\r\n\r\n/**\r\n * \r\n * @param vec 입력 벡터입니다.\r\n * @returns `vec` 내부에서 최솟값을 가지는 인덱스를 찾습니다. 최솟값이 여러 개일 경우 가장 처음의 값을 반환합니다.\r\n */\r\nexport function vecFindMinIdx(vec: number[]): number {\r\n  return vec.reduce((lowestIdx, current, idx) => current < vec[lowestIdx] ? idx : lowestIdx, 0);\r\n}\r\n\r\n/**\r\n * \r\n * @param vec 입력 벡터입니다.\r\n * @returns `vec` 내부에서 최댓값을 가지는 인덱스를 찾습니다. 최댓값이 여러 개일 경우 가장 처음의 값을 반환합니다.\r\n */\r\nexport function vecFindMaxIdx(vec: number[]): number {\r\n  return vec.reduce((highestIdx, current, idx) => current > vec[highestIdx] ? idx : highestIdx, 0);\r\n}\r\n\r\n/**\r\n * \r\n * @param vec 입력 벡터입니다.\r\n * @param absTol 실수 비교 연산에서의 반올림 오차 허용값입니다. 차이가 이 값보다 크지 않을 경우 같은 값으로 취급합니다. \r\n * @returns `vec`에서 최솟값을 가지는 인덱스에서만 양의 값을 가지는 벡터입니다. 내부 값은 1/(입력 벡터의 최솟값의 수) 입니다. 예를 들어 `vec`이 [0, 1, 0] 일 경우 [0.5, 0, 0.5]를 반홥합니다.\r\n */\r\nexport function maskVecAsMin(vec: number[], absTol = 1e-5) {\r\n  const minVal = vecFindMin(vec);\r\n  const mask = vec.map((current) => Math.abs(current - minVal) < absTol ? 1: 0)\r\n  return vecNormalize(mask);\r\n}\r\n\r\n/**\r\n* \r\n* @param len length of the output vector\r\n* @returns unit vector of length `len`. [1, 0, 0, ..., 0]\r\n*/\r\nexport function getUnitVec(len: number): number[] {\r\n  const result = Array(len).fill(0);\r\n  result[0] = 1;\r\n  return result;\r\n}\r\n\r\n/**\r\n* \r\n* @param vec input vector\r\n* @returns cumulative sum of `vec`. ex) [1, 2, 3] => [1, 3, 6]\r\n*/\r\nexport function vecCumSum(vec: number[]): number[] {\r\n  return vec.map((sum => value => sum += value)(0));\r\n}\r\n\r\n/**\r\n* \r\n* @param vec input vector\r\n* @returns Shifted vector. Makes deep copy. ex) [1, 2, 3] => [3, 1, 2]. \r\n*/\r\nexport function vecShiftToLast(vec: number[]): number[] {\r\n  if (vec.length <= 1) {\r\n      return vec;\r\n  }\r\n  const copied = vec.slice(0, -1)\r\n  copied.unshift(vec[vec.length - 1]);\r\n  return copied\r\n}\r\n\r\nexport function vecShiftToFirst(vec: number[]): number[] {\r\n  if (vec.length <= 1) {\r\n      return vec;\r\n  }\r\n  const copied = vec.slice(1)\r\n  copied.push(vec[0]);\r\n  return copied\r\n}\r\n\r\n/**\r\n* \r\n* @param mat input matrix\r\n* @returns Row-wise shifted matrix. Makes deep copy.\r\n*/\r\nexport function matShiftToLast(mat: number[][]): number[][] {\r\n  return mat.map((row) => vecShiftToLast(row));\r\n}\r\n\r\n/**\r\n* \r\n* @param vec input vector\r\n* @returns normalized vector such that sum(vector) = 1.\r\n*/\r\nexport function vecNormalize(vec: number[]): number[] {\r\n  const sum = vec.reduce((accum, item) => accum + item, 0);\r\n  return vec.map(x => x/sum);\r\n}\r\n\r\n/**\r\n* \r\n* @param revArr reversed array\r\n* @param startRow slice starting row index\r\n* @param endRow slice ending row index\r\n* @returns Slice reversed array as if it is normal. \r\n*      (noraml array).slice(startRow, endRow).reverse() = sliceRev((reversed array), startRow, endRow)\r\n*/\r\nexport function sliceRev<T>(revArr: T[], startRow: number, endRow: number): T[] {\r\n  const newStartRow = revArr.length - endRow;\r\n  const newEndRow = revArr.length - startRow;\r\n  return revArr.slice(newStartRow, newEndRow);\r\n}\r\n\r\n/**\r\n* \r\n* @param mat input matrix\r\n* @param colIdx column index to slice\r\n* @returns sliced vector.\r\n*/\r\nexport function matSliceCol(mat: number[][], colIdx: number): number[] {\r\n  return mat.reduce((accum, row) => accum.concat(row[colIdx]), []);\r\n}\r\n\r\n// multiplication\r\n/**\r\n* \r\n* @param vec1 (1 x n) row vector\r\n* @param vec2 (n X 1) column vector\r\n* @returns (vec1 . vec2) = scalar\r\n*/\r\nexport function vecVecDot(vec1: number[], vec2: number[]): number {\r\n  return vec1.reduce((accum, value, idx) => accum + (value*vec2[idx]), 0);\r\n}\r\n\r\n/**\r\n* \r\n* @param vec (1 x n) row vector.\r\n* @param mat (n x m) matrix. Should be in row-major order.\r\n* @returns (vec . mat) = (1 x m) row vector\r\n*/\r\nexport function vecMatDot(vec: number[], mat: number[][]): number[] {\r\n  return mat.reduce((accumRow, arrRow, rowIdx) => accumRow.map((colVal, colIdx) => colVal+arrRow[colIdx]*vec[rowIdx]), new Array(mat[0].length).fill(0))\r\n}\r\n\r\n/**\r\n* \r\n* @param mat (n x m) matrix. Should be in row-major order.\r\n* @param vec (m x 1) column vector.\r\n* @returns (mat . vec) = (n x l) column vector\r\n*/\r\nexport function matVecDot(mat: number[][], vec: number[]): number[] {\r\n  return mat.map((vec2) => vecVecDot(vec2, vec));\r\n}\r\n\r\n// debug\r\nexport function matToString(mat: number[][]): string {\r\n  return \"[\" + mat.map((x) => x.join(\", \")).join(\"] [\") + \"]\"\r\n}\r\n","import { getUnitVec, matShiftToLast, vecFindMin, vecMatDot, vecNormalize} from \"./linarg\";\r\n\r\n/**\r\n * \r\n * @param loseVec Lose rate of available choices. Act as a minimization objective. \r\n *      - ex. [.1, .2, .7] : lose rate .1 after calling 1 number,\r\n *      lose rate .2 after calling 2 number,\r\n *      lose rate .7 after calling 3 number. \r\n *      Thus, AI will call 3 numbers.\r\n * @param options Optional settings\r\n * @param options.absTol Arithematic error tolerance on comparison.\r\n * @returns Optimal choose rate for each choice.\r\n */\r\nexport function getChooseProb(loseVec: number[], {absTol=10e-5}: {absTol?: number} = {}): number[] {\r\n    const lowest = vecFindMin(loseVec);\r\n    const check = loseVec.map((x) => Math.abs(x - lowest) < absTol ? 1: 0);\r\n    const result = vecNormalize(check);\r\n    return result;\r\n}\r\n\r\nexport function getLookupMat(loseMat: number[][], maxCall: number, currentNum: number) {\r\n    const startRow = currentNum+1;\r\n    const endRow = currentNum+maxCall+1;\r\n    const lookupMat = loseMat.slice(startRow, endRow);\r\n    return lookupMat;\r\n}\r\n\r\nexport function getLookupMatRev(loseMat: number[][], maxCall: number, currentNum: number, numEnd: number) {\r\n    const currentIdx = numEnd - currentNum;\r\n    const endRow = Math.max(currentIdx, 0);\r\n    const startRow = Math.max(currentIdx - maxCall, 0);\r\n    const lookupMat = loseMat.slice(startRow, endRow);\r\n    return lookupMat;\r\n}\r\n\r\n/**\r\n * \r\n * @param loseMat \r\n * @param maxCall \r\n * @param currentNum \r\n * @returns (Modified) Lose rate vector regarding `loseMat`. \r\n */\r\nexport function getLoseVec(loseMat: number[][], maxCall: number, currentNum: number): number[] {\r\n    const lookupMat = getLookupMat(loseMat, maxCall, currentNum)\r\n    const loseVec = lookupMat.map((loseMatRow) => loseMatRow[0]) \r\n    return loseVec\r\n}\r\n\r\nexport function getLoseVecRev(loseMat: number[][], maxCall: number, currentNum: number, numEnd: number):number[] {\r\n    const lookupMat = getLookupMatRev(loseMat, maxCall, currentNum, numEnd);\r\n    const loseVec = lookupMat.map((loseMatRow) => loseMatRow[0])\r\n    return loseVec;\r\n}\r\n\r\n/**\r\n * \r\n * @param numPlayer Number of players\r\n * @param maxCall Maximam number of numbers player can call on his turn.\r\n * @param numEnd Final number of the game.\r\n * @returns ((`numEnd` + 1) x (`numPlayer`)) lose probability matrix. \r\n */\r\nexport function getFullLoseProbMat(numPlayer: number, maxCall: number, numEnd: number): number[][] {\r\n    try{\r\n        const loseMat = [];\r\n        const initial = getUnitVec(numPlayer);\r\n        loseMat.push(initial);\r\n        for (var currentNum=numEnd-1; currentNum>=0; currentNum--) {\r\n            const lookupMat = getLookupMatRev(loseMat, maxCall, currentNum, numEnd);\r\n            \r\n            const loseVec = lookupMat.map((lookupMatRow) => lookupMatRow[0]);\r\n            const chooseProb = getChooseProb(loseVec);\r\n\r\n            const lookupMatShifted = matShiftToLast(lookupMat);\r\n            const nextLoseVec = vecMatDot(chooseProb, lookupMatShifted);\r\n            loseMat.push(nextLoseVec);\r\n        }\r\n        return loseMat.reverse();\r\n    } catch (e) {\r\n        return [[]]\r\n    }\r\n}\r\n","import { vecFindMaxIdx, vecFindMinIdx } from \"lib/linarg\"\r\nimport { Bar } from \"react-chartjs-2\"\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false\r\n    }\r\n  }\r\n}\r\n\r\nexport default function StartingIndicator({loseProbAtZero} : {loseProbAtZero: number[]}) {\r\n  const bestStarting = vecFindMinIdx(loseProbAtZero)\r\n  const worstStarting = vecFindMaxIdx(loseProbAtZero)\r\n  const data = {\r\n    labels: Array.from(Array(loseProbAtZero.length).keys()).map((i) => `${i+1}번`),\r\n    datasets: [\r\n      {\r\n        id: 1,\r\n        label: '플레이어 승률',\r\n        data: loseProbAtZero.map((i) => 1-i),\r\n        backgroundColor: '#FF4500',\r\n      }\r\n    ]\r\n  }\r\n  return <div>\r\n    <h2 className='text-2xl'>순서별 승률 분석</h2>\r\n    <p>{`${bestStarting + 1}번째로 하는 게 제일 유리합니다. ${worstStarting + 1}번째로 하는 게 제일 불리합니다.`}</p>\r\n    <Bar data={data} options={options}/>\r\n  </div>\r\n}\r\n","import { Line } from \"react-chartjs-2\";\r\n\r\nfunction loseProbMatToData(loseProbMat: number[][], darkMode: boolean) {\r\n  return {\r\n    labels: Array.from(Array(loseProbMat.length).keys()),\r\n    datasets: [\r\n      {\r\n        id: 0,\r\n        label: '플레이어 승률',\r\n        data: loseProbMat.map(row => 1-row[0]),\r\n        backgroundColor: '#FF4500',\r\n        borderColor: darkMode? '#FF4500' : '#C9C7C7',\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false\r\n    }\r\n  }\r\n}\r\n\r\nexport default function NumberIndicator({loseProbMat, darkMode} : {loseProbMat: number[][], darkMode: boolean}) {\r\n  return <div>\r\n    <h2 className=' text-2xl'>숫자별 승률 분석</h2>\r\n    <p>세로축(높이)는 각 숫자에서 끝냈을 때 승률을 나타냅니다.</p>\r\n    <p>자신 턴에서 말할 수 있는 숫자 중 가장 승률이 높은 숫자까지 말하면 됩니다.</p> \r\n    <Line datasetIdKey='1' data={loseProbMatToData(loseProbMat, darkMode)} options={options}/>\r\n  </div>\r\n}","import {\r\n  Chart as ChartJS,\r\n  registerables\r\n} from 'chart.js'\r\nimport StartingIndicator from './StartingIndicator';\r\nimport NumberIndicator from './NumberIndicator';\r\nimport { vecShiftToFirst } from 'lib/linarg';\r\n\r\nChartJS.register(\r\n  ...registerables\r\n)\r\n\r\nexport default function ChartsContainer({loseProbMat, darkMode}: {loseProbMat: number[][], darkMode: boolean}) {\r\n  return <div className='flex flex-row flex-wrap'>\r\n    <article className='max-w-2xl w-full px-4 mb-8 flex-shrink flex-grow'>\r\n      <NumberIndicator loseProbMat={loseProbMat} darkMode={darkMode}/>\r\n    </article>\r\n    <article className='max-w-2xl w-full px-4 flex-shrink flex-grow'>\r\n      <StartingIndicator loseProbAtZero={vecShiftToFirst(loseProbMat[0])}/>\r\n    </article>\r\n  </div>\r\n}","import InputPanel from 'component/InputPanel';\r\nimport { getFullLoseProbMat } from 'lib/strategy';\r\nimport Header from 'component/Header'\r\nimport { GraphIcon } from 'asset/assets';\r\nimport useGameSetting, { GameSettingInputToGameSetting } from 'hooks/useGameSetting';\r\nimport useDarkMode from 'hooks/useDarkMode';\r\nimport Description from 'component/Description';\r\nimport ChartsContainer from './ChartsContainer';\r\nimport { useDeferredValue, useMemo } from 'react';\r\n\r\nexport default function CalculatorMain() {\r\n  const [gameSettingInput, settingDispatch] = useGameSetting();\r\n  const gameSetting = useDeferredValue(GameSettingInputToGameSetting(gameSettingInput));\r\n  const loseProbMat = useMemo(() => getFullLoseProbMat(gameSetting.numPlayer, gameSetting.maxCall, gameSetting.numEnd), [gameSetting]);\r\n  const [dark, ] = useDarkMode();\r\n  return <section>\r\n    <Header svg={<GraphIcon/>} text=\"승률 계산기\" to=\"/calculator\"/>\r\n    <Description>\r\n      <p>게임 설정에 따른 이론적 승률을 계산해줍니다.</p>\r\n    </Description>\r\n    <InputPanel gameSetting={gameSettingInput} dispatch={settingDispatch}/>\r\n    <ChartsContainer loseProbMat={loseProbMat} darkMode={dark}/>\r\n  </section>\r\n}","import React, { useReducer } from \"react\";\r\nimport { GameSettingInput } from \"../typedef/GameSetting\";\r\n\r\nexport enum GameSettingActionsKind {\r\n  SET_NUM_PLAYER = 'SET_NUM_PLAYER',\r\n  SET_MAX_CALL = 'SET_MAX_CALL',\r\n  SET_NUM_END = 'SET_NUM_END',\r\n  SET_MY_ORDER = 'SET_MY_ORDER'\r\n}\r\n\r\nexport interface GameSettingAction {\r\n  type: GameSettingActionsKind,\r\n  payload: string\r\n}\r\n\r\nexport type GameSettingDispatch = React.Dispatch<GameSettingAction>\r\n\r\nexport function GameSettingInputToGameSetting(gameSettingInput: GameSettingInput) {\r\n  return {\r\n    numPlayer: Number.parseInt(gameSettingInput.numPlayer)?? 0,\r\n    maxCall: Number.parseInt(gameSettingInput.maxCall)?? 0,\r\n    numEnd: Number.parseInt(gameSettingInput.numEnd)?? 0,\r\n    myOrder: Number.parseInt(gameSettingInput.myOrder) - 1?? 0\r\n  }\r\n}\r\n\r\nfunction gameSettingReducer(state: GameSettingInput, action: GameSettingAction): GameSettingInput {\r\n  const parsed = Number.parseInt(action.payload) ?? 0\r\n  switch (action.type) {\r\n    case (GameSettingActionsKind.SET_MAX_CALL):\r\n      if (parsed > 1000) {\r\n        return state;\r\n      }\r\n      const numEnd = Number.parseInt(state.numEnd);\r\n      if (!Number.isNaN(numEnd) && parsed > numEnd) {\r\n        return {\r\n          ...state,\r\n          maxCall: numEnd.toString()\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        maxCall: action.payload\r\n      }\r\n    case(GameSettingActionsKind.SET_MY_ORDER):\r\n      const numPlayer = Number.parseInt(state.numPlayer);\r\n      if (!Number.isNaN(numPlayer) && parsed > numPlayer) {\r\n        return {\r\n          ...state,\r\n          myOrder: (numPlayer).toString()\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        myOrder: action.payload\r\n      }\r\n    case(GameSettingActionsKind.SET_NUM_END):\r\n      if (parsed > 1000) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        numEnd: action.payload\r\n      }\r\n    case(GameSettingActionsKind.SET_NUM_PLAYER):\r\n      if (parsed > 500) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        numPlayer: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialSetting: GameSettingInput = {\r\n  numEnd: \"31\",\r\n  numPlayer: \"3\",\r\n  maxCall: \"3\",\r\n  myOrder: \"1\"\r\n}\r\n\r\nexport default function useGameSetting(): [GameSettingInput, GameSettingDispatch] {\r\n  return useReducer(gameSettingReducer, initialSetting);\r\n}"],"names":["Description","children","className","Header","svg","text","to","InputFieldNumber","onChange","name","value","props","type","InputFieldLabel","htmlFor","InputFieldContainer","InputBasicFields","gameSetting","dispatch","numPlayer","e","GameSettingActionsKind","payload","target","maxCall","numEnd","InputPanel","InputPanelWithPlayer","myOrder","vecFindMin","vec","reduce","lowest","current","Infinity","vecShiftToFirst","length","copied","slice","push","vecNormalize","sum","accum","item","map","x","vecMatDot","mat","accumRow","arrRow","rowIdx","colVal","colIdx","Array","fill","getChooseProb","loseVec","absTol","check","Math","abs","result","getLookupMatRev","loseMat","currentNum","currentIdx","endRow","max","startRow","getFullLoseProbMat","initial","len","getUnitVec","lookupMat","nextLoseVec","lookupMatRow","row","unshift","vecShiftToLast","reverse","options","plugins","legend","display","StartingIndicator","loseProbAtZero","bestStarting","lowestIdx","idx","worstStarting","highestIdx","vecFindMaxIdx","data","labels","from","keys","i","datasets","id","label","backgroundColor","loseProbMatToData","loseProbMat","darkMode","borderColor","NumberIndicator","datasetIdKey","ChartsContainer","ChartJS","registerables","CalculatorMain","useGameSetting","gameSettingInput","settingDispatch","useDeferredValue","GameSettingInputToGameSetting","useMemo","useDarkMode","dark","Number","parseInt","gameSettingReducer","state","action","parsed","SET_MAX_CALL","isNaN","toString","SET_MY_ORDER","SET_NUM_END","SET_NUM_PLAYER","initialSetting","useReducer"],"sourceRoot":""}