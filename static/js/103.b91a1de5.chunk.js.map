{"version":3,"file":"static/js/103.b91a1de5.chunk.js","mappings":"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","sources":["component/Description.tsx","component/Header.tsx","component/InputPanel.tsx","feature/singlePlay/GameBoard.tsx","feature/singlePlay/SinglePlayMain.tsx","hooks/useGameSetting.ts"],"sourcesContent":["export default function Description({children} : {children: React.ReactNode}) {\r\n  return <div className=\"\">\r\n    {children}\r\n  </div>\r\n}","import React, { ReactNode } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport function TitleText({children} : {children: React.ReactNode}) {\r\n  return <span>\r\n    {children}\r\n  </span>\r\n}\r\n\r\nexport default function Header({svg, text, to} : {svg: ReactNode, text: string, to: string}) {\r\n  return <header className=\"my-6\">\r\n    <Link to={to} className=\"flex align-baseline w-fit\">\r\n      <svg className=\"w-9 h-9 mr-5 drop-shadow-xl dark:fill-white\">\r\n        {svg}\r\n      </svg>\r\n      <h2 className='font-bold text-2xl'>{text}</h2>\r\n    </Link>\r\n  </header>\r\n}","import React from \"react\"\r\nimport { GameSettingActionsKind, GameSettingDispatch } from \"../hooks/useGameSetting\";\r\nimport { GameSettingInput } from \"../typedef/GameSetting\";\r\n\r\nfunction InputFieldNumber({onChange, name, value, ...props}: {onChange: React.ChangeEventHandler<HTMLInputElement>, name: string, value: string}) {\r\n  return <input className=\"border \r\n    dark:bg-gray-800\r\n    border-gray-300 \r\n    dark:border-gray-600\r\n    text-base \r\n    rounded-lg \r\n    outline-1\r\n    focus:outline-blue-600\r\n    dark:focus:outline-blue-200\r\n    block \r\n    w-full \r\n    p-2\" type=\"number\" onChange={onChange} value={value} name={name} {...props} />\r\n}\r\n\r\nfunction InputFieldLabel({htmlFor, children}: {htmlFor: string, children?: React.ReactNode}) {\r\n  return <label htmlFor={htmlFor} className=\" text-base font-medium block text-gray-800 dark:text-gray-100\">\r\n    {children}\r\n  </label>\r\n}\r\n\r\nfunction InputFieldContainer({children}: {children?: React.ReactNode}) {\r\n  return <div className=\"mb-4 max-w-sm\">\r\n    {children}\r\n  </div>\r\n}\r\n\r\nfunction InputBasicFields({gameSetting, dispatch} : {gameSetting: GameSettingInput, dispatch: GameSettingDispatch}) {\r\n  return <>\r\n  <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"num-player\">플레이어 수</InputFieldLabel>\r\n      <InputFieldNumber name=\"num-player\" value={gameSetting.numPlayer} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_NUM_PLAYER, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n    <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"max-call\">한 번에 부르는 최대 수</InputFieldLabel>\r\n      <InputFieldNumber name=\"max-call\" value={gameSetting.maxCall} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_MAX_CALL, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n    <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"num-end\">마지막 숫자</InputFieldLabel>\r\n      <InputFieldNumber name=\"num-end\" value={gameSetting.numEnd} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_NUM_END, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n  </>\r\n}\r\n\r\nexport default function InputPanel({gameSetting, dispatch} : {gameSetting: GameSettingInput, dispatch: GameSettingDispatch}) {\r\n  return <div className=\"flex flex-col mt-4 mb-4\">\r\n    <InputBasicFields gameSetting={gameSetting} dispatch={dispatch}/>\r\n  </div>\r\n}\r\n\r\nexport function InputPanelWithPlayer({gameSetting, dispatch} : {gameSetting: GameSettingInput, dispatch: GameSettingDispatch}) {\r\n  return <div className=\"flex flex-col mt-4 mb-4\">\r\n    <InputBasicFields gameSetting={gameSetting} dispatch={dispatch}/>\r\n    <InputFieldContainer>\r\n      <InputFieldLabel htmlFor=\"my-turn\">나의 순서</InputFieldLabel>\r\n      <InputFieldNumber name=\"my-turn\" value={gameSetting.myOrder} onChange={(e) => dispatch({type: GameSettingActionsKind.SET_MY_ORDER, payload: e.target.value})}/>\r\n    </InputFieldContainer>\r\n  </div>\r\n}","\r\n\r\nexport default function GameBoard() {\r\n  return <div>\r\n    구현 중인 기능입니다.\r\n  </div>\r\n}","import Header from \"component/Header\";\r\nimport { SinglePlayIcon } from \"asset/assets\";\r\nimport { InputPanelWithPlayer } from \"component/InputPanel\";\r\nimport { useState } from \"react\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport useGameSetting from \"hooks/useGameSetting\";\r\nimport Description from \"component/Description\";\r\n\r\nexport default function SinglePlayMain() {\r\n  const [gameSetting, settingDispatch] = useGameSetting()\r\n  const [gameStart, setGameStart] = useState(false);\r\n  return <section> \r\n    <Header svg={<SinglePlayIcon/>} text=\"컴퓨터와 플레이\" to=\"/single-play\"/>\r\n    <Description>\r\n      <p>최적 전략을 사용하는 컴퓨터와 게임합니다.</p>\r\n    </Description>\r\n    <div>\r\n      <InputPanelWithPlayer gameSetting={gameSetting} dispatch={settingDispatch}/>\r\n      <button onClick={() => setGameStart(true)}>게임 시작</button>\r\n      {gameStart? <GameBoard /> : null}\r\n    </div>\r\n  </section>\r\n}\r\n","import React, { useReducer } from \"react\";\r\nimport { GameSettingInput } from \"../typedef/GameSetting\";\r\n\r\nexport enum GameSettingActionsKind {\r\n  SET_NUM_PLAYER = 'SET_NUM_PLAYER',\r\n  SET_MAX_CALL = 'SET_MAX_CALL',\r\n  SET_NUM_END = 'SET_NUM_END',\r\n  SET_MY_ORDER = 'SET_MY_ORDER'\r\n}\r\n\r\nexport interface GameSettingAction {\r\n  type: GameSettingActionsKind,\r\n  payload: string\r\n}\r\n\r\nexport type GameSettingDispatch = React.Dispatch<GameSettingAction>\r\n\r\nexport function GameSettingInputToGameSetting(gameSettingInput: GameSettingInput) {\r\n  return {\r\n    numPlayer: Number.parseInt(gameSettingInput.numPlayer)?? 0,\r\n    maxCall: Number.parseInt(gameSettingInput.maxCall)?? 0,\r\n    numEnd: Number.parseInt(gameSettingInput.numEnd)?? 0,\r\n    myOrder: Number.parseInt(gameSettingInput.myOrder) - 1?? 0\r\n  }\r\n}\r\n\r\nfunction gameSettingReducer(state: GameSettingInput, action: GameSettingAction): GameSettingInput {\r\n  const parsed = Number.parseInt(action.payload) ?? 0\r\n  switch (action.type) {\r\n    case (GameSettingActionsKind.SET_MAX_CALL):\r\n      if (parsed > 1000) {\r\n        return state;\r\n      }\r\n      const numEnd = Number.parseInt(state.numEnd);\r\n      if (!Number.isNaN(numEnd) && parsed > numEnd) {\r\n        return {\r\n          ...state,\r\n          maxCall: numEnd.toString()\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        maxCall: action.payload\r\n      }\r\n    case(GameSettingActionsKind.SET_MY_ORDER):\r\n      const numPlayer = Number.parseInt(state.numPlayer);\r\n      if (!Number.isNaN(numPlayer) && parsed > numPlayer) {\r\n        return {\r\n          ...state,\r\n          myOrder: (numPlayer).toString()\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        myOrder: action.payload\r\n      }\r\n    case(GameSettingActionsKind.SET_NUM_END):\r\n      if (parsed > 1000) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        numEnd: action.payload\r\n      }\r\n    case(GameSettingActionsKind.SET_NUM_PLAYER):\r\n      if (parsed > 500) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        numPlayer: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialSetting: GameSettingInput = {\r\n  numEnd: \"31\",\r\n  numPlayer: \"3\",\r\n  maxCall: \"3\",\r\n  myOrder: \"1\"\r\n}\r\n\r\nexport default function useGameSetting(): [GameSettingInput, GameSettingDispatch] {\r\n  return useReducer(gameSettingReducer, initialSetting);\r\n}"],"names":["Description","children","className","Header","svg","text","to","InputFieldNumber","onChange","name","value","props","type","InputFieldLabel","htmlFor","InputFieldContainer","InputBasicFields","gameSetting","dispatch","numPlayer","e","GameSettingActionsKind","payload","target","maxCall","numEnd","InputPanel","InputPanelWithPlayer","myOrder","GameBoard","SinglePlayMain","useGameSetting","settingDispatch","useState","gameStart","setGameStart","onClick","GameSettingInputToGameSetting","gameSettingInput","Number","parseInt","gameSettingReducer","state","action","parsed","SET_MAX_CALL","isNaN","toString","SET_MY_ORDER","SET_NUM_END","SET_NUM_PLAYER","initialSetting","useReducer"],"sourceRoot":""}